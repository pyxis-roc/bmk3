#!/usr/bin/python3
# -*- mode: python -*-

import argparse
import bmk3
import os
import sys
import bmk3.cmdscript as cmdscript

if __name__ == "__main__":
    p = argparse.ArgumentParser(description="Run a bmk3 script")
    p.add_argument("-f", dest="bmk3file", help="bmk3 script file", default="bmk3.yaml")
    p.add_argument("-v", dest="variables", help="Add variable", default=[], action="append")
    p.add_argument("-n", dest="dryrun", help="Dry run", action="store_true")
    p.add_argument("-q", dest="quiet", help="Quiet", action="store_true")
    p.add_argument("-k", dest="keep", choices=['always', 'fail', 'never'],
                   help="Keep temporary files", default='fail')
    p.add_argument("-C", dest="workdir", metavar="DIR", help="Change to DIR")
    p.add_argument("rules", nargs="*", help="Prefixes of rules to run", default=[])

    args = p.parse_args()
    if args.workdir:
        os.chdir(args.workdir)

    if not os.path.exists(args.bmk3file):
        print(f"ERROR: {args.bmk3file} does not exist.", file=sys.stderr)
        sys.exit(1)

    cmdline_variables = {}
    if args.variables:
        for v in args.variables:
            vn, vv = v.split("=", 1)
            cmdline_variables[vn] = vv

    s = bmk3.Script(args.bmk3file)

    tvars = dict(s.variables)
    tvars.update(cmdline_variables)

    # expand recursive template definitions
    for t in s.templates:
        s.templates[t].expand_templates(s.templates)

    # expand template definitions and build command scripts

    cmdscripts = []

    for t in s.templates:
        try:
            for g in s.templates[t].generate(tvars):
                a, c = g
                k = [t]

                if 'binary' in a: k.append(a['binary'])
                if 'input' in a: k.append(str(a['input']['name']))

                name = ':'.join(k)

                if len(args.rules):
                    for r in args.rules:
                        if name.startswith(r):
                            # print(f"*** {name} [matched {r}]")
                            x = cmdscript.CmdScript(name, c, a, cwd = s.cwd)
                            cmdscripts.append(x)
                else:
                    print(f"*** {name}")
                    x = cmdscript.CmdScript(name, c, a)
                    print(x)
                    x.cleanup()
        except KeyError as err:
            print("ERROR IN EXPANDING TEMPLATE, KeyError", err, file=sys.stderr)
            raise
            sys.exit(1)

    for c in cmdscripts:
        print(f"**** {c.name}")

        print(c.script)
        fail = False
        if not args.dryrun:
            if not c.run():
                if not args.quiet:
                    print(c.result.output)
                    print(c.result.errors)
                fail = True
            else:
                if not args.quiet:
                    print(c.result.output)
                    print(c.result.errors)

        if args.keep != 'always':
            if args.keep == 'never' or not (fail and args.keep == 'fail'):
                c.cleanup()

